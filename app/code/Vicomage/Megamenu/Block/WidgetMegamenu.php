<?php

namespace Vicomage\Megamenu\Block;

class WidgetMegamenu extends \Magento\Framework\View\Element\Template implements \Magento\Widget\Block\BlockInterface
{

    protected $_coreRegistry;
    protected $itemsFactory;
    protected $itemCollectionFactory;
    protected $groupFactory;
    protected $groupCollectionFactory;
    protected $categoryRepository;
    protected $categoryFactory;
    protected $_filterProvider;
    protected $_registry;


    /**
     * TopMegamenu constructor.
     * @param \Magento\Framework\Registry $registry
     * @param \Vicomage\Megamenu\Model\ItemsFactory $itemsFactory
     * @param \Vicomage\Megamenu\Model\ResourceModel\Items\CollectionFactory $itemCollectionFactory
     * @param \Vicomage\Megamenu\Model\GroupFactory $groupFactory
     * @param \Vicomage\Megamenu\Model\ResourceModel\Group\CollectionFactory $groupCollectionFactory
     * @param \Magento\Catalog\Api\CategoryRepositoryInterface $categoryRepository
     * @param \Magento\Backend\Block\Template\Context $context
     * @param \Magento\Cms\Model\Template\FilterProvider $filterProvider
     * @param array $data
     */
    public function __construct(
        \Magento\Framework\Registry $registry,
        \Vicomage\Megamenu\Model\ItemsFactory $itemsFactory,
        \Vicomage\Megamenu\Model\ResourceModel\Items\CollectionFactory $itemCollectionFactory,
        \Vicomage\Megamenu\Model\GroupFactory $groupFactory,
        \Vicomage\Megamenu\Model\ResourceModel\Group\CollectionFactory $groupCollectionFactory,
        \Magento\Catalog\Api\CategoryRepositoryInterface $categoryRepository,
        \Magento\Catalog\Model\CategoryFactory $categoryFactory,
        \Magento\Backend\Block\Template\Context $context,
        \Magento\Cms\Model\Template\FilterProvider $filterProvider,
        array $data = []
    )
    {
        $this->_registry = $registry;
        $this->itemsFactory = $itemsFactory;
        $this->categoryFactory = $categoryFactory;
        $this->itemCollectionFactory = $itemCollectionFactory;
        $this->groupFactory = $groupFactory;
        $this->groupCollectionFactory = $groupCollectionFactory;
        $this->categoryRepository = $categoryRepository;
        $this->_filterProvider = $filterProvider;
        parent::__construct($context, $data);
    }

    public function _construct()
    {
        $data = $this->getData();
        if(isset($data['menu_type'])){
            switch ($data['menu_type']) {
                case 'navigation':

                    $this->setTemplate('widget_navigation.phtml');
                    break;
                case 'vertical':

                    $this->setTemplate('widget_vertical.phtml');
                    break;
                case 'accordion':

                    $this->setTemplate('widget_accordion.phtml');
                    break;
            }
        }
        parent::_construct(); // TODO: Change the autogenerated stub
    }


    /**
     * @param $id
     * @return mixed
     */
    public function getMenuTypeGroup($id)
    {
        $menuType = array(
            1 => 'fullwidth',
            2 => 'staticwidth',
            3 => 'dropdown',
        );

        return $menuType[$id];
    }


    /**
     * @param $id
     * @return mixed
     */
    public function getMenuEffertItem($id)
    {
        $menuEffert = array(
            1 => 'default',
            2 => 'fullwidth',
            3 => 'staticwidth',
            4 => 'dropdown',
        );

        return $menuEffert[$id];
    }


    /**
     * get current group by id
     * @return $this|null
     */
    public function getGroupById()
    {
        $groupConfig = $this->getConfig();
        if ($groupConfig['group'] && $this->enableMenu()) {
            $groupCollection = $this->groupCollectionFactory->create()
                ->addFieldToFilter('group_id',array('eq' => $groupConfig['group']))
                ->addFieldToFilter('status',array('eq' => 1))->getData();
            $groupCollection[0]['categorys'] = $this->getChildCategoryInCurrentRootCategory($groupCollection[0]['categorys']);

            if (!empty($groupCollection)) {
                return $groupCollection[0];
            }
        }
        return false;
    }


    /**
     * @param $selectedCategoryId
     * @return string
     */
    public function getChildCategoryInCurrentRootCategory($selectedCategoryId)
    {
        $categoryId = array();
        $selectedCategoryId = explode(',',$selectedCategoryId);
        $rootCatId = $this->_storeManager->getStore()->getRootCategoryId();
        $collection = $this->categoryFactory->create()->getCollection()
            ->addAttributeToSelect(array('entity_id'))
            ->addAttributeToFilter('parent_id', $rootCatId)
            ->addAttributeToFilter('include_in_menu', 1)
            ->addIsActiveFilter();

        foreach($collection as $subCategory){
            if(in_array($subCategory->getEntityId(),$selectedCategoryId)){
                $categoryId[] = $subCategory->getEntityId();
            }
        }
        return implode(',',$categoryId);
    }


    /**
     * get all items in group
     * @return $this
     */
    public function getItems()
    {
        $groupData = $this->getGroupById();
        if ($groupData) {
            if ($groupData['items'] != null) {
                $itemCollection = $this->itemCollectionFactory->create()
                    ->addFieldToFilter('item_id', array('in' => $groupData['items']))
                    ->addFieldToFilter('status', array('eq' => 1))
                    ->setOrder('position','ASC');
                if ($itemCollection) {
                    return $itemCollection;
                }
                return false;
            }
        }
        return false;
    }


    /**
     * get config enable menu filter
     * @return mixed
     */
    public function enableMenu()
    {
        return $this->_scopeConfig->getValue('vicomage_megamenu_setting/general/enabled',
            \Magento\Store\Model\ScopeInterface::SCOPE_STORE);
    }


    /**
     * check category had sub category
     * @param $categoryId
     * @return bool
     */
    public function hasSubcategory($categoryId)
    {
        if ($categoryId) {
            $childCategorys = $this->getChildrenCategoryById($categoryId);
            if ($childCategorys != null) {
                return true;
            }
        }
        return false;
    }

    /**
     * function get category by Id
     * @param $categoryId
     * @return bool|\Magento\Catalog\Api\Data\CategoryInterface
     */
    public function getCategoryById($categoryId)
    {
        if ($categoryId) {

            $categoryCollection = $this->categoryRepository->get($categoryId, $this->_storeManager->getStore()->getId());
            if ($categoryCollection) {

                if ($categoryCollection->getIsActive() == 1) {

                    return $categoryCollection;
                }
            }
        }
        return false;
    }

    /**
     * function get children category by id
     * @param $categoryId
     * @return bool|null|string
     */
    public function getChildrenCategoryById($categoryId)
    {
        if ($categoryId) {

            $childCategorys = $this->categoryRepository->get($categoryId,$this->_storeManager->getStore()->getId())->getChildren();
            if ($childCategorys) {

                return $childCategorys;
            }
        }
        return false;
    }

    /**
     * check if sub of category is current
     * @param $categoryId
     * @return bool
     */
    public function checkSubCategoryIsCurrent($categoryId)
    {
        $childCategorys = $this->getChildrenCategoryById($categoryId);
        $currentCategoryId = $this->_registry->registry('current_category')->getId();

        if ($categoryId == $currentCategoryId) {
            return true;
        }
        if ($childCategorys != null) {
            foreach (explode(',', $childCategorys) as $subCategoryId) {
                if ($currentCategoryId == $subCategoryId) {
                    return true;
                } else {
                    if ($this->checkSubCategoryIsCurrent($subCategoryId)) {
                        return true;
                    }
                }
            }
        }
    }


    /**
     * @param $categoryId
     * @return string
     */
    public function checkCurrentCategory($categoryId)
    {
        $category = $this->_registry->registry('current_category');
        $result = null;

        if (isset($category)) {
            if ($category->getId() == $categoryId) {
                return 'current';
            } else {
                if ($this->checkSubCategoryIsCurrent($categoryId)) {
                    return 'current';
                }
                return $result;
            }
        }
        return $result;
    }

    /**
     * get config for top menu
     * @return array
     *
     */
    public function getConfig()
    {
        $config = array(
            'group' => $this->getData('group'),
        );
        return $config;
    }


    /**
     * get html mega menu
     * @param $item
     * @return null|string
     */
    public function getMegamenuHtml($item)
    {
        $data = $this->getData();
        if(isset($data['menu_type'])){
            switch ($data['menu_type']) {
                case 'navigation':

                    return $this->getMegamenuHtmlTop($item);
                case 'vertical':

                    return $this->getMegamenuHtmlTop($item);
                case 'accordion':

                    return $this->getMegamenuHtmlAcc($item);
            }
        }
    }


    /**
     * @param $item
     * @return null|string
     */
    public function getMegamenuHtmlTop($item)
    {
        $enable = true;
        $category = false;
        //check item category if disable will can not display
        if ($item->getMenuType() == 1) {
            $category = $this->getCategoryById($item->getCategoryId());
            if ($category == false) {
                $enable = false;
            }
        }
        //check and display menu
        if($enable) {
            $groupData = $this->getGroupById();
            if ($groupData) {
                $menuType = ($item->getMenuEf() == 1) ? $this->getMenuTypeGroup($groupData['menu_type']) : $this->getMenuEffertItem($item->getMenuEf());
                $currentClass = null;
                if ($item->getMenuType() == 2) {
                    $customUrl = ($item->getUrl()) ? $item->getUrl() : '#';
                    $parentClass = ($item->getMainContent() != null) ? 'parent' : null;

                } else {
                    $currentClass = $this->checkCurrentCategory($item->getCategoryId());
                    $parentClass = ($this->hasSubcategory($item->getCategoryId())) ? 'parent' : null;

                    if ($category) {
                        $categoryUrl = $category->getUrl();
                    } else {
                        $categoryUrl = null;
                    }
                    $customUrl = ($item->getUrl()) ? $item->getUrl() : $categoryUrl;
                }
                $html = null;


                $html .= '<li class="' . $currentClass . ' ui-menu-item level0 ' . $parentClass . ' ' . $menuType . ' ' . $item->getCustomClass() . '">';
                $html .= '<a href="' . $customUrl . '" class="level-top"><span>' . __($item->getFakeName());

                if ($item->getCategoryLabel() && $item->getCategoryLabel() != null) {
                    $classLabel = strtolower(str_replace(' ', '', $item->getCategoryLabel()));
                    $html .= '<span class="cat-label cat-label-' . $classLabel . '" >' . $item->getCategoryLabel() . '</span >';
                }

                $html .= '</span>';


                $html .= '</a>';

                if ($item->getMenuType() == 1) {
                    if ($this->hasSubcategory($item->getCategoryId())) {
                        $html .= '<div class="open-children-toggle"></div>';
                    }
                    //get html when type item is category
                    $html .= $this->getHtmlMenuTypeCategory($item, $menuType);
                } else {
                    if ($item->getMainContent() != null) {
                        $html .= '<div class="open-children-toggle"></div>';
                    }
                    //get html when type item is static
                    $html .= $this->getHtmlMenuTypeStatic($item, $menuType);
                }

                $html .= '</li>';

                return $html;
            }
        }
        return null;
    }


    /**
     * @param $item
     * @return null|string
     */
    public function getMegamenuHtmlAcc($item)
    {

        $menuType = 'dropdown';
        $currentClass = null;
        $enable = true;
        $category = false;
        //check item category if disable will can not display
        if ($item->getMenuType() == 1) {
            $category = $this->getCategoryById($item->getCategoryId());
            if ($category == false) {
                $enable = false;
            }
        }
        if ($enable) {
            if ($item->getMenuType() == 2) {
                $customUrl = ($item->getUrl()) ? $item->getUrl() : '#';
                $parentClass = null;

            } else {
                $currentClass = $this->checkCurrentCategory($item->getCategoryId());
                $parentClass = ($this->hasSubcategory($item->getCategoryId())) ? 'parent' : null;
                if ($category) {
                    $categoryUrl = $category->getUrl();
                } else {
                    $categoryUrl = null;
                }
                $customUrl = ($item->getUrl()) ? $item->getUrl() : $categoryUrl;
            }
            $html = null;
            $html .= '<li class="' . $currentClass . ' ui-menu-item level0 ' . $parentClass . ' ' . $menuType . ' ' . $item->getCustomClass() . '">';
            $html .= '<a href="' . $customUrl . '" class="level-top"><span>' . __($item->getFakeName());

            if ($item->getCategoryLabel() && $item->getCategoryLabel() != null) {
                $classLabel = strtolower(str_replace(' ', '', $item->getCategoryLabel()));
                $html .= '<span class="cat-label cat-label-' . $classLabel . '" >' . $item->getCategoryLabel() . '</span >';
            }

            $html .= '</span>';

            $html .= '</a>';

            if ($item->getMenuType() == 1) {
                if ($this->hasSubcategory($item->getCategoryId())) {
                    $html .= '<div class="open-children-toggle"></div>';
                }
                //get html when type item is category
                $html .= $this->getHtmlMenuTypeCategory($item, $menuType);
            }

            $html .= '</li>';

            return $html;
        }
        return null;
    }

    /**
     * @param $item
     * @param $menuType
     * @return null|string
     */
    public function getHtmlMenuTypeStatic($item, $menuType)
    {
        $html = null;
        if ($menuType == 'staticwidth') {
            if ($item->getMainContent() != null) {
                $style = null;
                if ($item->getStaticWidth() != null) {
                    $style = 'style=" width:' . $item->getStaticWidth() . '"';
                }
                $html .= '<div class="level0 submenu" ' . $style . '>';
                $html .= $this->_filterProvider->getBlockFilter()->filter($item->getMainContent());
                $html .= '</div>';
            }

        } elseif ($menuType == 'fullwidth') {

            if ($item->getMainContent() != null) {
                $html .= '<div class="level0 submenu">';
                $html .= $this->_filterProvider->getBlockFilter()->filter($item->getMainContent());
                $html .= '</div>';
            }
        } elseif($menuType == 'dropdown')  {

            if ($item->getMainContent() != null) {
                $html .= '<ul class="subchildmenu submenu">';
                $html .= $this->_filterProvider->getBlockFilter()->filter($item->getMainContent());
                $html .= '</ul>';
            }
        }
        return $html;
    }


    /**
     * get Html of type category
     * @param $item
     * @param $menuType
     * @return null|string
     */
    public function getHtmlMenuTypeCategory($item, $menuType)
    {
        $data = $this->getData();
        if(isset($data['menu_type'])){
            switch ($data['menu_type']) {
                case 'navigation':

                    return $this->getHtmlMenuTypeCategoryTop($item, $menuType);
                case 'vertical':

                    return $this->getHtmlMenuTypeCategoryTop($item, $menuType);
                case 'accordion':

                    return $this->getHtmlMenuTypeCategoryAcc($item, $menuType);
            }
        }
    }


    /**
     * @param $item
     * @param $menuType
     * @return null|string
     */
    public function getHtmlMenuTypeCategoryTop($item, $menuType)
    {
        $html = null;
        switch ($menuType) {
            case 'dropdown':

                if ($this->hasSubcategory($item->getCategoryId())) {
                    $html .= '<ul class="subchildmenu submenu">';
                    $html .= $this->getCategoryDropdown($item->getCategoryId());
                    $html .= '</ul>';
                }
                break;

            case 'staticwidth':
                $style = null;
                if ($item->getStaticWidth() != null) {
                    $style = 'style=" width:' . $item->getStaticWidth() . '"';
                }
                $html .= '<div class="level0 submenu" ' . $style . '>';
                if ($item->getTopContent() != null || $item->getTopContent() != '') {
                    $html .= '<div class="menu-top-block static-content">';
                    //top-block
                    $html .= $this->_filterProvider->getBlockFilter()->filter($item->getTopContent());
                    $html .= '</div>';
                }
                $html .= '<div class="row">';
                if (($item->getLeftContent() != null || $item->getLeftContent() != '') && $item->getLeftCol() > 0) {
                    $html .= '<div class="menu-left-block static-content col-sm-' . $item->getLeftCol() . '">';
                    //Left Block
                    $html .= $this->_filterProvider->getBlockFilter()->filter($item->getLeftContent());
                    $html .= '</div>';
                }

                if ($this->hasSubcategory($item->getCategoryId())) {

                    $html .= '<ul class="subchildmenu col-sm-' . $item->getColumns() . ' mega-columns columns' . $item->getSubcategoryColumns() . '">';
                    $html .= $this->getCategoryStaticWidth($item->getCategoryId());
                    $html .= '</ul>';
                }

                if (($item->getRightContent() != null || $item->getRightContent() != '') && $item->getRightCol() > 0) {
                    $html .= '<div class="menu-right-block static-content col-sm-' . $item->getRightCol() . '">';
                    //Right Block
                    $html .= $this->_filterProvider->getBlockFilter()->filter($item->getRightContent());
                    $html .= '</div>';
                }
                $html .= '</div>';
                if ($item->getBottomContent() != null || $item->getBottomContent() != '') {
                    $html .= '<div class="menu-bottom-block static-content">';
                    //bottom-block
                    $html .= $this->_filterProvider->getBlockFilter()->filter($item->getBottomContent());
                    $html .= '</div>';
                }
                $html .= '</div>';


                break;

            case 'fullwidth':

                $html .= '<div class="level0 submenu">';
                if ($item->getTopContent() != null || $item->getTopContent() != '') {
                    $html .= '<div class="menu-top-block static-content">';
                    //top-block
                    $html .= $this->_filterProvider->getBlockFilter()->filter($item->getTopContent());
                    $html .= '</div>';
                }
                $html .= '<div class="row">';

                if (($item->getLeftContent() != null || $item->getLeftContent() != '') && $item->getLeftCol() > 0) {
                    $html .= '<div class="menu-left-block static-content col-sm-' . $item->getLeftCol() . '">';
                    //Left Block
                    $html .= $this->_filterProvider->getBlockFilter()->filter($item->getLeftContent());
                    $html .= '</div>';
                }

                if ($this->hasSubcategory($item->getCategoryId())) {
                    $html .= '<ul class="subchildmenu col-sm-' . $item->getColumns() . ' mega-columns columns' . $item->getSubcategoryColumns() . '">';
                    $html .= $this->getCategoryStaticWidth($item->getCategoryId());
                    $html .= '</ul>';
                }

                if (($item->getRightContent() != null || $item->getRightContent() != '') && $item->getRightCol() > 0) {
                    $html .= '<div class="menu-right-block static-content col-sm-' . $item->getRightCol() . '">';
                    //Right Block
                    $html .= $this->_filterProvider->getBlockFilter()->filter($item->getRightContent());
                    $html .= '</div>';
                }
                $html .= '</div>';

                if ($item->getBottomContent() != null || $item->getBottomContent() != '') {
                    $html .= '<div class="menu-bottom-block static-content">';
                    //bottom-block
                    $html .= $this->_filterProvider->getBlockFilter()->filter($item->getBottomContent());
                    $html .= '</div>';
                }
                $html .= '</div>';

                break;
        }

        return $html;
    }


    /**
     * @param $item
     * @param $menuType
     * @return null|string
     */
    public function getHtmlMenuTypeCategoryAcc($item, $menuType)
    {
        $html = null;
        if ($this->hasSubcategory($item->getCategoryId())) {
            $html .= '<ul class="subchildmenu submenu">';
            $html .= $this->getCategoryDropdown($item->getCategoryId());
            $html .= '</ul>';
        }

        return $html;
    }

    /**
     * get category of item
     * @param $categoryId
     * @return null|string
     */
    public function getCategoryDropdown($categoryId)
    {
        $childCategorys = $this->getChildrenCategoryById($categoryId);

        $html = null;
        $level = 1;
        if ($childCategorys) {
            foreach (explode(',', $childCategorys) as $childCategory) {
                if ($childCategory) {

                    $category = $this->getCategoryById($childCategory);
                    if ($category) {

                        $parentClass = ($this->hasSubcategory($category->getId())) ? 'parent' : null;
                        $html .= '<li class="' . $this->checkCurrentCategory($category->getId()) . ' ui-menu-item level' . $level . ' ' . $parentClass . '">';
                        $html .= $this->getImageCategoryById($categoryId);
                        $html .= '<a class="level-top" href="' . $category->getUrl() . '"><span>' . $category->getName() . '</span></a>';
                        $html .= $this->getSubCategoryDropdown($category->getId(), ($level + 1));
                        $html .= '</li>';
                    }
                }
            }
        }
        return $html;
    }


    /**
     * get sub categorys of type dropdown
     * @param $categoryId
     * @param $level
     * @return null|string
     */
    public function getSubCategoryDropdown($categoryId, $level)
    {
        $childCategorys = $this->getChildrenCategoryById($categoryId);
        $html = null;

        if ($childCategorys != null) {

            $html .= '<div class="open-children-toggle"></div>';
            $html .= '<ul class="subchildmenu submenu">';
            foreach (explode(',', $childCategorys) as $childCategory) {
                if ($childCategory) {

                    $category = $this->getCategoryById($childCategory);
                    if ($category) {
                        $parentClass = ($this->hasSubcategory($category->getId())) ? 'parent' : null;
                        $html .= '<li class="' . $this->checkCurrentCategory($category->getId()) . ' ui-menu-item level' . $level . ' ' . $parentClass . '">';
                        $html .= $this->getImageCategoryById($categoryId);
                        $html .= '<a class="level-top" href="' . $category->getUrl() . '"><span>' . $category->getName() . '</span></a>';
                        $html .= $this->getSubCategoryDropdown($category->getId(), ($level + 1));
                        $html .= '</li>';
                    }
                }
            }
            $html .= '</ul>';
        }

        return $html;
    }


    /**
     * @param $categoryId
     * @return null|string
     */
    public function getCategoryStaticWidth($categoryId)
    {
        $childCategorys = $this->getChildrenCategoryById($categoryId);
        $html = null;
        $level = 1;
        if ($childCategorys) {
            foreach (explode(',', $childCategorys) as $categoryId) {
                if ($categoryId) {

                    $category = $this->getCategoryById($categoryId);
                    if ($category) {

                        $parentClass = ($this->hasSubcategory($categoryId)) ? 'parent' : null;
                        $html .= '<li class="' . $this->checkCurrentCategory($category->getId()) . ' ui-menu-item level' . $level . ' ' . $parentClass . '">';
                        $html .= $this->getImageCategoryById($categoryId);
                        $html .= '<a class="level-top" href="' . $category->getUrl() . '">' . $category->getName() . '</a>';
                        $html .= $this->getSubCategoryStaticWidth($categoryId, ($level + 1));
                        $html .= '</li>';
                    }
                }
            }
        }


        return $html;
    }

    /**
     * @param $categoryId
     * @param $level
     * @return null|string
     */
    public function getSubCategoryStaticWidth($categoryId, $level)
    {
        $childCategorys = $this->getChildrenCategoryById($categoryId);
        $html = null;
        if ($childCategorys != null) {
            $html .= '<div class="open-children-toggle"></div>';
            $html .= '<ul class="subchildmenu submenu">';
            foreach (explode(',', $childCategorys) as $categoryId) {
                if ($categoryId) {

                    $category = $this->getCategoryById($categoryId);
                    if ($category) {

                        $parentClass = ($this->hasSubcategory($categoryId)) ? 'parent' : null;
                        $html .= '<li class="' . $this->checkCurrentCategory($category->getId()) . ' ui-menu-item level' . $level . ' ' . $parentClass . '">';
                        $html .= $this->getImageCategoryById($categoryId);
                        $html .= '<a href="' . $category->getUrl() . '"><span>' . __($category->getName()) . '</span></a>';
                        $html .= $this->getSubCategoryStaticWidth($categoryId, ($level + 1));
                        $html .= '</li>';
                    }
                }
            }
            $html .= '</ul>';
        }
        return $html;
    }


    /**
     * @param $categoryId
     * @return null|string
     */
    public function getCategoryFullWidth($categoryId)
    {
        $childCategorys = $this->getChildrenCategoryById($categoryId);
        $html = null;
        $level = 1;
        foreach (explode(',', $childCategorys) as $categoryId) {
            if ($categoryId) {

                $category = $this->getCategoryById($categoryId);
                if ($category) {

                    $parentClass = ($this->hasSubcategory($categoryId)) ? 'parent' : null;
                    $html .= '<li class="' . $this->checkCurrentCategory($category->getId()) . ' ui-menu-item level' . $level . ' ' . $parentClass . ' ">';
                    $html .= $this->getImageCategoryById($categoryId);
                    $html .= '<a class="level-top" href="' . $category->getUrl() . '">' . $category->getName() . '</a>';
                    $html .= $this->getSubCategoryFullWidth($categoryId, ($level + 1));
                    $html .= '</li>';
                }
            }
        }


        return $html;
    }

    /**
     * @param $categoryId
     * @param $level
     * @return null|string
     */
    public function getSubCategoryFullWidth($categoryId, $level)
    {
        $childCategorys = $this->getChildrenCategoryById($categoryId);
        $html = null;
        if ($childCategorys != null) {
            $html .= '<div class="open-children-toggle"></div>';
            $html .= '<ul class="subchildmenu submenu">';
            foreach (explode(',', $childCategorys) as $categoryId) {
                $category = $this->getCategoryById($categoryId);
                if ($category) {
                    $parentClass = ($this->hasSubcategory($categoryId)) ? 'parent' : null;
                    $html .= '<li class="' . $this->checkCurrentCategory($category->getId()) . ' ui-menu-item level' . $level . ' ' . $parentClass . '">';
                    $html .= $this->getImageCategoryById($categoryId);
                    $html .= '<a href="' . $category->getUrl() . '"><span>' . __($category->getName()) . '</span></a>';
                    $html .= $this->getSubCategoryStaticWidth($categoryId, ($level + 1));
                    $html .= '</li>';
                }
            }
            $html .= '</ul>';
        }
        return $html;
    }


    /**
     * function get category html
     * @return null|string
     */
    public function getCategorys()
    {
        $data = $this->getData();
        if(isset($data['menu_type'])){
            switch ($data['menu_type']) {
                case 'navigation':

                    return $this->getCategorysTop();
                case 'vertical':

                    return $this->getCategorysTop();
                case 'accordion':

                    return $this->getCategorysAcc();
            }
        }
    }


    /**
     * @return null|string
     */
    public function getCategorysAcc()
    {
        $groupData = $this->getGroupById();
        $html = null;
        if ($groupData) {
            foreach (explode(',', $groupData['categorys']) as $categoryId) {
                if ($categoryId) {
                    $itemCategorys = $this->itemCollectionFactory->create()
                        ->addFieldToFilter('category_id', array('eq' => $categoryId))
                        ->addFieldToFilter('status', array('eq' => 1))
                        ->addFieldToFilter('menu_type', array('eq' => 1));
                    if ($itemCategorys->getData()) {
                        foreach ($itemCategorys as $item) {
                            $html .= $this->getMegamenuHtml($item);
                            continue;
                        }
                    } else {
                        $category = $this->getCategoryById($categoryId);
                        if ($category) {
                            $parentClass = ($this->hasSubcategory($category->getId())) ? 'parent' : null;
                            $html .= '<li class="' . $this->checkCurrentCategory($category->getId()) . ' ui-menu-item level0 ' . $this->getMenuTypeGroup($groupData['menu_type']) . ' ' . $parentClass . ' ">';
                            $html .= '<a href="' . $category->getUrl() . '" class="level-top"><span>' . __($category->getName()) . '</span></a>';
                            if ($this->hasSubcategory($category->getId())) {
                                $html .= '<div class="open-children-toggle"></div>';
                            }
                            //get html of category
                            $html .= $this->getHtmlCategory($category,
                                $this->getMenuTypeGroup($groupData['menu_type']));
                            $html .= '</li>';
                        }
                    }
                }
            }
        }
        return $html;
    }


    /**
     * @return null|string
     */
    public function getCategorysTop()
    {
        $groupData = $this->getGroupById();
        $html = null;
        if ($groupData) {
            $categorys = $groupData['categorys'];
            foreach (explode(',', $categorys) as $categoryId) {
                if ($categoryId) {
                    $itemCategorys = $this->itemCollectionFactory->create()
                        ->addFieldToFilter('category_id', array('eq' => $categoryId))
                        ->addFieldToFilter('status', array('eq' => 1))
                        ->addFieldToFilter('menu_type', array('eq' => 1));
                    if ($itemCategorys->getData()) {
                        foreach ($itemCategorys as $item) {
                            $html .= $this->getMegamenuHtml($item);
                            continue;
                        }
                    } else {
                        $category = $this->getCategoryById($categoryId);
                        if ($category) {
                            $parentClass = ($this->hasSubcategory($category->getId())) ? 'parent' : null;
                            $html .= '<li class="' . $this->checkCurrentCategory($category->getId()) . ' ui-menu-item level0 ' . $this->getMenuTypeGroup($groupData['menu_type']) . ' ' . $parentClass . ' ">';
                            $html .= '<a href="' . $category->getUrl() . '" class="level-top"><span>' . __($category->getName()) . '</span></a>';
                            if ($this->hasSubcategory($category->getId())) {
                                $html .= '<div class="open-children-toggle"></div>';
                            }
                            //get html of category
                            $html .= $this->getHtmlCategory($category,
                                $this->getMenuTypeGroup($groupData['menu_type']));
                            $html .= '</li>';
                        }
                    }
                }
            }
        }
        return $html;
    }


    /**
     * get Html of category
     * @param $item
     * @param $menuType
     * @return null|string
     */
    public function getHtmlCategory($category, $menuType)
    {
        $data = $this->getData();
        if(isset($data['menu_type'])){
            switch ($data['menu_type']) {
                case 'navigation':

                    return $this->getHtmlCategoryTop($category, $menuType);
                case 'vertical':

                    return $this->getHtmlCategoryTop($category, $menuType);
                case 'accordion':

                    return $this->getHtmlCategoryAcc($category, $menuType);
            }
        }

    }


    /**
     * @param $category
     * @param $menuType
     */
    public function getHtmlCategoryTop($category, $menuType)
    {
        $html = null;
        switch ($menuType) {
            case 'dropdown':

                if ($this->hasSubcategory($category->getId())) {
                    $html .= '<ul class="subchildmenu submenu">';
                    $html .= $this->getCategoryDropdown($category->getId());
                    $html .= '</ul>';
                }
                break;

            case 'staticwidth':
                if ($this->hasSubcategory($category->getId())) {
                    $html .= '<div class="level0 submenu">';
                    $html .= '<div class="menu-top-block static-content">';
                    //top-block
                    $html .= '</div>';
                    $html .= '<div class="row">';
                    $html .= '<div class="menu-left-block static-content">';
                    //Left Block
                    $html .= '</div>';


                    $html .= '<ul class="subchildmenu mega-columns">';
                    $html .= $this->getCategoryStaticWidth($category->getId());
                    $html .= '</ul>';

                    $html .= '<div class="menu-right-block static-content">';
                    //Right Block
                    $html .= '</div>';
                    $html .= '</div>';
                    $html .= '<div class="menu-bottom-block static-content">';
                    //bottom-block
                    $html .= '</div>';
                    $html .= '</div>';
                }

                break;

            case 'fullwidth':
                if ($this->hasSubcategory($category->getId())) {
                    $html .= '<div class="level0 submenu">';
                    $html .= '<div class="menu-top-block static-content">';
                    //top-block
                    $html .= '</div>';
                    $html .= '<div class="row">';
                    $html .= '<div class="menu-left-block static-content">';
                    //Left Block
                    $html .= '</div>';

                    $html .= '<ul class="subchildmenu mega-columns">';
                    $html .= $this->getCategoryFullWidth($category->getId());
                    $html .= '</ul>';


                    $html .= '<div class="menu-right-block static-content">';
                    //Right Block
                    $html .= '</div>';
                    $html .= '</div>';
                    $html .= '<div class="menu-bottom-block static-content">';
                    //bottom-block
                    $html .= '</div>';
                    $html .= '</div>';
                }
                break;
        }
    }


    /**
     * @param $category
     * @param $menuType
     * @return null|string
     */
    public function getHtmlCategoryAcc($category, $menuType)
    {
        $html = null;

        if ($this->hasSubcategory($category->getId())) {
            $html .= '<ul class="subchildmenu submenu">';
            $html .= $this->getCategoryDropdown($category->getId());
            $html .= '</ul>';
        }
        return $html;
    }


    /**
     * @param $categoryId
     * @return null|string
     */
    public function getImageCategoryById($categoryId)
    {
        $categoryCollection = $this->categoryRepository->get($categoryId, $this->_storeManager->getStore()->getId());
        $html = null;
        if($categoryCollection->getMegamenuImg() != null) {

            $mediaUrl = $this->_storeManager->getStore()->getBaseUrl(\Magento\Framework\UrlInterface::URL_TYPE_MEDIA) . 'catalog/category/';
            $imgUrl = $mediaUrl . $categoryCollection->getMegamenuImg();
            $html .= '<div class="category-image">';
            $html .= '<img src="' . $imgUrl . '" />';
            $html .= '</div>';

        }elseif($categoryCollection->getMegamenuImg() == null && $categoryCollection->getMegamenuIcon() != null) {

            $html .= '<div class="'. $categoryCollection->getMegamenuIcon() .'">';
            $html .= '</div>';
        }
        return $html;
    }

}
